class Solution {
public:
    int kadane(vector<int> a, int n)  
{  
    int max_so_far = a[0], max_ending_here = 0;  
    int i;  
    for (i = 0; i < n; i++)  
    {  
        max_ending_here = max_ending_here + a[i];  
        
        if (max_so_far < max_ending_here)  
            max_so_far = max_ending_here; 
        if (max_ending_here < 0)  
            max_ending_here = 0;  
    }  
    return max_so_far;  
}  
    int maxSubarraySumCircular(vector<int>& a) {
        int n=a.size();
        if(n==1)
            return a[0];
        int max=INT_MIN,flag=0;
        for(int i=0;i<a.size();i++)
        {
            if(a[i]>=0)
            {
                flag=1;
                break;
            }
            
        }
        
    int max_kadane = kadane(a, n);    
        if(flag==0)
            return max_kadane;
    int max_wrap = 0, i;  
    for (i = 0; i < n; i++)  
    {  
            max_wrap += a[i];
            a[i] = -a[i];   
    }  
       
    max_wrap = max_wrap + kadane(a, n);  
      
    // The maximum circular sum will be maximum of two sums  
    return (max_wrap > max_kadane)? max_wrap: max_kadane;  
}  
        
};